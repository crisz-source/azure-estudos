// definindo a criação da pipeline
pipeline { 

    // Agente de execução, onde vai ser executada essa pipeline, seja no Linux, Windows, Mac etc... aqui vou usar qualquer agent
    agent any

    // estágios de execução da pipeline
    stages {
        stage('Build docker image') { 
            // os passos de execução, como se fossem os jobs do GitHub Actions
            steps {
                // esse script ta sendo criado pois já possuo o plugin instalado do docker, para que a pipeline use comandos docker
                script{
                    // variável que vai resultar a criação da imagem docker
                    dockerapp = docker.build("jenkinshub.azurecr.io/conversao:${env.BUILD_ID}", '-f JENKINS-CI-CD/jenkins/jenkins-no-aks/deploy-jenkins/helm/dockerfile JENKINS-CI-CD/jenkins/jenkins-no-aks/deploy-jenkins/helm/ ') // utilziando o build e usando a tag incrimental da build
                }
            }
        }

        stage('Push docker image') { 
            // os passos de execução, como se fossem os jobs do GitHub Actions
            steps {
                
                script{
                    // configurando o acesso ao acr
                     docker.withRegistry("https://jenkinshub.azurecr.io", "acr-admin-user")

                        // subindo duas imagens, uma latest e uma versionada
                        dockerapp.push('latest')
                        dockerapp.push("${env.BUILD_ID}")
                }
            }
        }

        stage('Deploy no kubernetes') { 
            // os passos de execução, como se fossem os jobs do GitHub Actions
            steps {
                sh 'echo "Executando o comando kubectl apply"'
            }
        }
    }
}
